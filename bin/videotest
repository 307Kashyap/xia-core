#!/usr/bin/env python
# Copyright 2018 Carnegie Mellon University
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
    Test driver for the XIA video testbed
"""

import os
import sys
import time
import argparse
import subprocess
from selenium import webdriver
from selenium.webdriver import Firefox
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.firefox.options import Options

VER = '1.0'                 # app version
MANIFEST  = 'http://www.origin.xia/%s.mpd'
DASH_PATH = 'file://%s/applications/video-use-case/src/visualizer/dash/samples/dash-if-reference-player/index.html'
SRCDIR    = os.getcwd()[:os.getcwd().rindex('xia-core')+len('xia-core')]
DASH_PLAYER = DASH_PATH % SRCDIR



class element_has_css_class(object):
    """
    A Selenium expectation for checking that an element has a particular css class.

    locator - used to find the element
    returns the WebElement once it has the particular css class
    """
    def __init__(self, locator, css_class):
        self.locator = locator
        self.css_class = css_class

    def __call__(self, driver):
        element = driver.find_element(*self.locator)   # Finding the referenced element
        if self.css_class in element.get_attribute("class"):
            return element
        else:
            return False



def enable_proxy(enable):
    '''
    turn system proxy on/off for testing

    Note: needs root permission to work
    '''
    if enable:
        print 'enabling systemwide http proxy settings: localhost:8080'
        subprocess.Popen(['gsettings', 'set', 'org.gnome.system.proxy.http', 'port', '8080'])
        subprocess.Popen(['gsettings', 'set', 'org.gnome.system.proxy.http', 'host', 'localhost'])
        subprocess.Popen(['gsettings', 'set', 'org.gnome.system.proxy', 'mode', 'manual'])
    else:
        print 'disabling systemwide http proxy'
        subprocess.Popen(['gsettings', 'set', 'org.gnome.system.proxy', 'mode', 'none'])




def play_video(video):
    print 'loading video demo web page'
    browser.get(DASH_PLAYER)

    print '    video:', video

    # find the elements we need to work with
    manifest_field = browser.find_element_by_id("vfield")
    load_btn = browser.find_element_by_id("vbtn")
    play_time = browser.find_element_by_id("videoTime")

    # specify the manifest and start playing
    manifest_field.send_keys(MANIFEST % video)
    start = time.time()
    load_btn.click()

    # give the video time to start playing before we start to check state
    time.sleep(2)

    # wait for 5 minutes or until the video finishes
    # video is assumed done when the play/pause icon switches back to a play button
    # clicking the pause button will halt the current test
    WebDriverWait(browser, 300).until(element_has_css_class((By.ID, 'iconPlayPause'), 'icon-play'))

    # check the time played and report an error if 0
    if '00:00' in play_time.get_attribute('innerHTML'):
        print '    status: failed'
    else:
        end = time.time()
        print '    status: success'
        print '    elapsed time: %d seconds' % int(end - start)


def configure():
    global args

    parser = argparse.ArgumentParser(description='Video Tester')
    parser.add_argument('-v', '--version', action='version', version=VER)
    parser.add_argument('-p', '--proxy', action='store_true', help='turn on the systemwide proxy (Needs sudo)')
    parser.add_argument(      '--headless', action='store_true', help='run Firefox in headless mode')
    parser.add_argument('videos', metavar='V', nargs='+', help='list of videos to play')
    args = parser.parse_args()



def main():
    global browser

    configure()
    if args.proxy:
        enable_proxy(True)

    try:
        print 'launching firefox'
        if args.headless:
            print 'running in headless mode'
            options = Options()
            options.add_argument('-headless')
            browser = Firefox(executable_path='geckodriver', firefox_options=options)
        else:
            browser = webdriver.Firefox()

        for video in args.videos:
            play_video(video)

        print 'closing firefox'
        browser.quit()

    finally:
        # turn the proxy settings off again
        if args.proxy:
            enable_proxy(False)


if __name__ == "__main__":
    main()
