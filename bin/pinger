#! /usr/bin/env python
# Copyright 2018 Carnegie Mellon University
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# FIXME:
# removed static endhost name
# replace re searches with compiled searches
# add comments
# better error handling
# make sure msg format contains the right info

import os
import re
import sys
import time
import rpyc
import msgpack
import argparse
import subprocess
import xiapyutils
from configparser import ConfigParser

VER='1.0'
FREQ=60
DELAY=0.3
COUNT=3
BROKER='localhost'
PORT='44444'
CONF='etc/scenario.conf'
CONFPATH=os.path.join(xiapyutils.xia_srcdir(), CONF)
hostname=xiapyutils.getxiaclickhostname()

hostname='host0'

#
# ping the specified dag and return average round trip time and % packet loss
#
def ping(dag):
    rtt = None
    loss = 100

    params = [os.path.join(xiapyutils.xia_srcdir(), 'bin/xping'),
            '-q', '-c', str(args.count), '-i', str(args.delay), dag]

    p = subprocess.Popen(params, stdout = subprocess.PIPE)
    lines, err = p.communicate()

    for line in lines.splitlines():
        l = re.search(r'(\d+)\% packet loss', line)
        if l:
            loss = l.group(1)
        r = re.search(r'\d+/(\d+)/\d+', line)
        if r:
           rtt = r.group(1)

    return (rtt, loss)


def update_stats():
    host = {'name' : hostname,
            'id' : config.get(hostname, 'id'),
            'latitude' : config.get(hostname, 'lat'),
            'longitude' : config.get(hostname, 'long'),
            'clusters' : {}
            }
    try:
        cdns = config.items('cdns')
        for (cdn, foo)  in cdns:
            msg('pinging clusters in %s' % cdn)
            for (cluster, value) in config.items(cdn):

                # we only want bare keys
                if value != None and value != '':
                    continue

                msg('    %s' % cluster)

                address = config.get(cluster, 'address')
                latency, loss = ping(address)
                msg('        latency:%s loss:%s%%' % (latency, loss))

                host['clusters'][cluster] = {'latency':latency, 'loss':loss, 'id' : config.get(cluster, 'id')}
    except Exception as err:
        print 'Error: %s' % str(err)
        sys.exit(-1)

    try:
        host_msg = msgpack.packb(host)
        broker.root.update_stats(host_msg)
    except Exception as err:
        print 'Error unable to send data: %s' % str(err)
        sys.exit(-1)


#
# display status message unless in stealth mode
#
def msg(str, *params):
    if args.verbose:
        if params:
            print str, params
        else:
            print str

#
# get the # of pings to send to each cluster
#
def count_val(arg):
    try:
        value = int(arg)
    except ValueError as err:
        raise argparse.ArgumentTypeError(str(err))

    if value < 1 or value > 10:
        message='count must be between 1 and 10'
        raise argparse.ArgumentTypeError(message)

    return value

def delay_val(arg):
    try:
        value=float(arg)
    except ValueError as err:
        raise argparse.ArgumentTypeError(str(err))

    if value < 0.1 or value > 2.0:
        message='ping x delay must be between 0.1 and 2.0 seconds'
        raise argparse.ArgumentTypeError(message)

    return value
def freq_val(arg):
    try:
        value=int(arg)
    except ValueError as err:
        raise argparse.ArgumentTypeError(str(err))

    if value < 1 or value > 600:
        message='ping delay must be between 1 and 600 seconds'
        raise argparse.ArgumentTypeError(message)

    return value


parser = argparse.ArgumentParser(description='gather CDN stats')
parser.add_argument('-v', '--version', action='version', version=VER)
parser.add_argument('-V', '--verbose', action='store_true', help='print status messages')
parser.add_argument('-F', '--frequency', type=freq_val, help='check every COUNT seconds (default: %(default)s)')
parser.add_argument('-c', '--count',   type=count_val, help='# of pings to send (default:%(default)d)')
parser.add_argument('-d', '--delay',   type=delay_val, help='delay between pings in seconds (default: %(default)s)')
parser.add_argument('-f', '--file',    type=argparse.FileType('r'), help='cdn config file (default: %s)' % CONF)
parser.add_argument('-b', '--broker', help='IP/hostname of the broker service')
parser.add_argument('-p', '--port', help='broker port (default=%(default)s)')
parser.set_defaults(frequency=FREQ, count=COUNT, delay=DELAY, file=CONFPATH, broker=BROKER, port=PORT)
args=parser.parse_args()


try:
    config = ConfigParser(allow_no_value = True)
    config.readfp(args.file)
except Exception as err:
    print str(err)
    sys.exit(-1)

try:
    broker=rpyc.connect(args.broker, args.port)
    msg('connected to broker: %s:%s' % (args.broker, args.port))
except Exception as err:
    print 'Unable to connect to the broker on %s:%s: %s' % (args.broker, args.port, str(err))
    sys.exit(-1)

msg('using conf file %s' % args.file.name)
while True:
    update_stats()
    print 'sleeping'
    time.sleep(args.frequency)

