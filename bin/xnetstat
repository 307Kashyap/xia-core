#!/usr/bin/env python
#
# Copyright 2015 Carnegie Mellon University
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import socket
import argparse
import clicksock

APP_VERSION="1.0"

SOCKET_TYPES = [ "STREAM", "DGRAM", "RAW" ]

# command strings to send to click
XTRANSPORT = "%s/xrc/xtransport"
NS_PURGE = XTRANSPORT + ".purge"
NS_FLUSH = XTRANSPORT + ".flush"
NS_LIST  = XTRANSPORT + ".netstat"

# socket table format string
NS_FORMAT = "%-5s  %-3s %-6s  %-10s  %s"

def main():
	global click
	global hostname
	global types
	global args

	hostname = socket.gethostname().split('.')[0]
	types = []

	parser = argparse.ArgumentParser(description = 'XIA netstat %s' % APP_VERSION)
	parser.add_argument("-f", "--flush", action="store_true", help='purge all STREAM sockets in TIME_WAIT state')
	parser.add_argument("-p", "--purge", action='store_true', help='purge *ALL* STREAM sockets')
	parser.add_argument("-t", "--type", nargs="*", help='only output information for the specified Socket type(s) STREAM|DGRAM|CHUNK')
	parser.add_argument("-s", "--sort", help='sort output on (p)ort, (t)ype, (s)tate, or (x)id', default='p')
	args = parser.parse_args()

	# make list of socket types to display
	makeTypeList()

	with clicksock.clicksock() as click:

		if (args.purge):
			purge()
		elif (args.flush):
			flush()
		else:
			printSocketTable()


#
# Purge all STREAM sockets regardless of state
#
def purge():
	print "Purging ALL Stream sockets"
	click.writeData(NS_PURGE % hostname)

#
# Purge all STREAM sockets in TIME_WAIT
#
def flush():
	print "Purging sockets in TIME_WAIT state"
	click.writeData(NS_FLUSH % hostname)

	#
# format the route table header and loop through the requested XID tables
#
def printSocketTable():
	print NS_FORMAT % ("PORT", "REF", "TYPE", "STATE",  "XID")
	print  "=" * 75

	data = click.readData(NS_LIST % hostname)

	sockets = []
	lines = data.split("\n")
	for line in lines:
		socket = line.split(",")
		if len(socket) != 5:
			continue

		if socket[1] in map(str.upper, types):
			socket[0] = int(socket[0])
			sockets.append(socket)

	index = "ptsx".find(args.sort)
	if index == -1:
		index = 0
	sockets.sort(key=lambda tup: tup[index])

	for socket in sockets:
		print NS_FORMAT % (socket[0], socket[4], socket[1], socket[2], socket[3])


#
# print an error message and exit the app with an error
#
def errorExit(msg):
	print msg
	sys.exit(-1)


#
# make list of socket types to display
#
def makeTypeList():
	global types

	# if specified by the user, only get info for the specified Socket types (STREAM, DGRAM,...)
	if (args.type != None):
		if len(args.type) == 0:
			errorExit("error: No types specified")
		types = args.type

		for type in types:
			if type.upper() not in SOCKET_TYPES:
				errorExit("Invalid socket type specified (%s)" % type)
	else:
		types = SOCKET_TYPES


if __name__ == "__main__":
    main()
