#!/usr/bin/python
#
# Copyright 2013 Carnegie Mellon University
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import sys
import os
import re
import genkeys

DEFAULT_PORT=1500

def help():
	print '\nUsage: %s click_conf_file dest_sockconf dest_nodeconf' % sys.argv[0]
	print 'creates xsockconf.ini and nodes.conf in the current directory based on the'
	print 'specified click_conf_file\n'
	sys.exit(-1)

def create_output_file(name):
	try:
		return open(name, 'w')
	except:
		print 'ERROR: unable to open %s for writing\n' % name
		help()

# start here

# We take exactly 3 arguments
if len(sys.argv) != 4:
	help()
topology_conf_file = sys.argv[1]
sockconf_ini_file  = sys.argv[2]
nodes_conf_file	   = sys.argv[3]

# Create the xsockconf.ini file
sockconf = create_output_file(sockconf_ini_file)
sockconf.write('# Generated from %s\n\n' % os.path.basename(topology_conf_file))
sockconf.write('[default]\nclick_port=%s\n\n' % DEFAULT_PORT)

# Create the nodes.conf file
nodeconf = create_output_file(nodes_conf_file)

# pattern for comment containing nameserver host name
ns_pattern = re.compile('//\s*(\w+)\s*::\s*nameserver')

# pattern for a Click element instantiation
# hostname :: element_type (argument1, argument2, ...)
element_pattern = re.compile('^(\w+)\s*::\s*(\w+)\s*\((.+)\);')

# Nameserver hostname
nshost = None

# Read the bootstrapping click config file that defines the topology
try:
	with open(topology_conf_file) as conf_file:
		for line in conf_file:
			# Read nameserver from comment: '// host :: nameserver'
			match = ns_pattern.match(line)
			if match:
				nshost = match.group(1)
				continue

			# Look for Click host/router definitions
			match = element_pattern.match(line)
			if not match:
				continue

			# We found a Click host/router instance
			hostname  = match.group(1)
			elemtype  = match.group(2)
			arguments = match.group(3).replace(' ','').split(',')

			# Write a sockconf entry for this hostname
			sockconf.write('[%s]\nclick_port=%s\n\n' % (hostname, arguments[0])))

			# Create a nodes.conf entry for this hostname
			nodeconf.write("%s\t%s\n" % (hostname, elemtype))
except:
	help()

# Add nameserver (if found) at the end of nodes.conf
if nshost != None:
	nodeconf.write("%s\t%s\n" % (nshost, 'nameserver'))

sockconf.close
nodeconf.close
