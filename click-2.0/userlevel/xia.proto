package xia;

// FIXME: consider starting enums at 1 instead of 0
// anything with a 0 value doesn't show in the protobug debug string which
// makes debugging difficult

enum XSocketCallType {
  XSOCKET = 0;
  XBIND = 1;
  XCLOSE = 2;
  XCONNECT = 3;
  XACCEPT = 4;
  XPUTCID = 5;
  XGETCID = 6;
  XSENDTO = 7;
  XSEND = 8;
  XRECV = 9;
  XRECVFROM = 10;

  XREQUESTFAILED = 11;

  XGETSOCKETIDLIST = 12;
  XGETSOCKETINFO = 13;

  XGETCIDSTATUS = 14;
  XREADCID = 15;
  XSETSOCKOPT = 16;
  XGETSOCKOPT = 17;
  XRESULT = 18;
}

message XSocketMsg {
  required XSocketCallType type = 1; // XIA Socket call type
  
  optional X_Socket_Msg x_socket= 2;
  optional X_Bind_Msg x_bind= 3;
  optional X_Close_Msg x_close= 4;
  optional X_Connect_Msg x_connect= 5;
  optional X_Accept_Msg x_accept= 6;
  optional X_Putcid_Msg x_putcid= 7;
  optional X_Getcid_Msg x_getcid= 8;
  optional X_Sendto_Msg x_sendto= 9;
  optional X_Send_Msg x_send= 10;
  optional X_Recv_Msg x_recv= 11;
  optional X_Recvfrom_Msg x_recvfrom= 12;  
  
  optional X_Requestfailed_Msg x_requestfailed= 13; 

  optional X_Getsocketidlist_Msg x_getsocketidlist = 14;
  optional X_Getsocketinfo_Msg x_getsocketinfo = 15;

  optional X_Getcidstatus_Msg x_getcidstatus= 16;
  optional X_Readcid_Msg x_readcid= 17;

  optional X_Setsockopt_Msg x_setsockopt = 18;
  optional X_Getsockopt_Msg x_getsockopt = 19;

  optional X_Result_Msg x_result = 20;
}
 
message X_Socket_Msg {
  required int32 type = 1; // Indicating the type of tranport (0: Reliable transport, 1: Unreliable transport)
  optional string temp = 2; // currently not used
}

message X_Bind_Msg {
  required string sdag = 1; // bind to src dag 
}

message X_Close_Msg {
  optional bytes payload = 1; // data  
}

message X_Connect_Msg {
  required string ddag = 1; // connect to destination dag 
  optional int32 status = 2; // Indicating the status (-1: connected, -1: failed) 
}

message X_Accept_Msg {
  optional string temp = 1; // currently not used
}

message X_Putcid_Msg {
  required string sdag = 1; // src dag
  required bytes payload = 2; // data 
}

message X_Getcid_Msg {
  required int32 numcids = 1; // the number of Content-DAGs requested
  required string cdaglist = 2; // Content-DAGs each concatenated using '^'
  optional bytes payload = 3; // data
}

message X_Getcidstatus_Msg {
  required int32 numcids = 1; // the number of Content-DAGs requested
  required string cdaglist = 2; // Content-DAGs each concatenated using '^'
  required string status_list = 3; // Status for CID requests each concatenated using '^'
  optional bytes payload = 4; // data
}

message X_Readcid_Msg {
  required int32 numcids = 1; // the number of Content-DAGs requested
  required string cdaglist = 2; // Content-DAGs each concatenated using '^'
  optional string status_list = 3; // Status for CID requests each concatenated using '^'
  optional bytes payload = 4; // data
}


message X_Sendto_Msg {
  required string ddag = 1; // dest dag
  required bytes payload = 2; // data 
}

message X_Send_Msg {
  required bytes payload = 1; // data 
}

message X_Recv_Msg {
  optional string temp = 1; // currently not used
}

message X_Recvfrom_Msg {
  optional string temp = 1; // currently not used
}
 
 
message X_Getsocketidlist_Msg {
  optional int32 size = 1; // number of active sockets
  repeated int32 id = 2;   // active socket ids (_sport)
}

message X_Getsocketinfo_Msg {
  required int32 id = 1; // socket id to examine
  optional int32 port = 2;
  optional bytes status = 3;
  optional bytes xid = 4;	
  optional bytes xiapath_src = 5;
  optional bytes xiapath_dst = 6;
  optional bytes protocol = 7;	
}

message X_Setsockopt_Msg {
	required int32 opt_type = 1;
	optional int32 int_opt = 2;
	// we will likely have to add other optional fields as we add options in the future
}

message X_Getsockopt_Msg {
	required int32 opt_type = 1;
	optional int32 int_opt = 2;
	// we will likely have to add other optional fields as we add options in the future
}

message X_Result_Msg {
	required XSocketCallType type = 1; // XIA Socket call type
	required int32 return_code = 2;	// same as a normal socket return code
	optional int32 err_code = 3;	// if ret_code is -1, contains related errno value
}

message X_Requestfailed_Msg {
  optional int32 type = 1; // Indicating the type of error (to be defined)
  optional string temp = 2; // currently not used
}



/**************************************************/

message msg {
  optional int32 appid = 1;  // port number?
  optional bytes xid = 2;
  optional string xiapath_src = 5;
  optional string xiapath_dst = 6;
  optional bytes payload = 3;  
  enum MsgType {
    GETLOCALHID = 0;
    GETCID = 1;
    CONNECTSID = 2;
    PUTCID = 3;
    SERVESID = 4;
  }
  optional MsgType type = 4;

}

message msg_response {
  required int32 appid = 1;
  repeated bytes xid = 2;   // can be a list of CID's
  optional string payload = 3;  // bytes or string?
}



  
