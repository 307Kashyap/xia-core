#!/bin/bash

# input:
#   FILE.pcap[ng]
#
# output files:
#   FILE(n)-c.log  : client side packets
#   FILE(n_-s.log  : server side packets
#   FILE(n)-rc.log : client side retransmit counts
#   FILE(n)-rs.log : server side retransmit counts
#
# tab delimited output format:
#   pkt# normalized_timestamp normalized_seq# normalized_ack# window orig_seq# orig_ack#

normalize() {
awk '                                                   \
    BEGIN {                                             \
        FS = "\t";                                      \
        OFS = "\t";                                     \
        init = 0;                                       \
    }                                                   \
    {                                                   \
        # skip over any SYN packets, ack_no is always 0 \
        if ($4 == 0) {                                  \
            next                                        \
        }                                               \
        if (init == 0) {                                \
            # get the initial values                    \
            init = 1;                                   \
            tm = $2;                                    \
            seq = $3;                                   \
            ack = $4;                                   \
        }                                               \
        # normalize values so we start from 0           \
        t = $2 - tm;                                    \
        s = $3 - seq;                                   \
        a = $4 - ack;                                   \
        # fix sequence & ack # wrapping issues          \
        if (s < 0) {                                    \
            s += 4 * 1024 * 1024 * 1024;                \
        }                                               \
        if (a < 0) {                                    \
            a += 4 * 1024 * 1024 * 1024;                \
        }                                               \
        # keep the original seq #s for retransmit logs  \
        print $1, t, s, a, $5, $3, $4                   \
    }                                                   \
    ' $1 > $1.tmp && mv $1.tmp $1
}

makelogs() {
    if [ "$1" == "server" ]; then
        echo "finding SYN-ACK packet(s)"
        type="s"
        ack=1            # find SYN-ACKs
        fieldno="-f6"    # use original seq# column

    else
        echo "finding SYN packet(s)"
        type="c"
        ack=0            # find SYNs
        fieldno="-f7"    # use original ack# column
    fi

    fields="xstream.flags.syn==1 && xstream.flags.ack == $ack"

    dags=$($tshark -nr $infile -Y "$fields" -T fields -e xip.src_dag_entry)

    i=""
    last=""
    # tshark is annoying and is putting everything onto a single line
    # split lines on AD entries
    # and replace spaces between XIDs with newline escape sequence (\x0a) to make tshark happy
    for dag in $(echo $dags | sed 's/ ad/\nad/g' | sed 's/ /\\x0a/g'); do

        # skip over cases where the SYN/SYN-ACK packets were retransmitted
        [ "$last" == "$dag" ] && continue
        last=$dag

        logfile=$name$i-$type.log
        rfile=$name$i-r$type.log
        [ "$i" == "" ] && i=0
        ((i=i+1))

        echo "creating $logfile for:"
        echo "    $dag"

        # make the data files
        $tshark -nr $infile                    \
            -Y "xip.src_dag_entry == \"$dag\"" \
            -T fields                          \
            -e frame.number                    \
            -e frame.time_relative             \
            -e xstream.seq_no                  \
            -e xstream.ack_no                  \
            -e xstream.win                     \
            > $logfile

        # strip out any SYN packets & then normalize output to start at 0
        normalize $logfile

        # now make retransmit logs of sequence/ack # that were sent more than once
        cat $logfile | cut $fieldno | sort | uniq -c | sort -n | egrep -v "^ +1" > $rfile
    done
}

##############################################################################
# START HERE

# use the XIA version of tshark so that it understands xstream packets
tshark=~/wireshark/tshark

# capture file name
name=$1

if [ $# != 1 ]; then
cat << EOF
echo usage: $(basename $0) capture_file

Create logs for xstream packet traces similar to chunk transfers where all
data flows in one direction.

Output is separate log files for the client and server ends of the connection
as well as a pair of logs showing retransmitted packets.

If multiple stream sessions are found, each session will be output to a new
set of numbered log files.
EOF
    exit
fi

infile=$1

if [ -e $infile ]; then
    # strip the extension
    name="${infile%.*}"
else
    echo $infile not found
    exit 1
fi

makelogs client
makelogs server

