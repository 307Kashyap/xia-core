package session;

enum SessionCallType {
  // Messages between API and session process
  RETURN_CODE = 1;

  NEW_CONTEXT = 3;
  INIT = 4;
  BIND = 5;
  ACCEPT = 6;
  SEND = 7;
  RECEIVE = 8;
  CLOSE = 9;
}

enum ReturnCode {
	SUCCESS = 1;
	FAILURE = 2;
}

enum ConnType {
	TCP = 1;
	UDP = 2;
	XSP = 3;
	XDP = 4;
}

enum PacketType {
	SESSION_INFO = 1;
	DATA = 2;
	TEARDOWN = 3;
}


// Messages between API and session process

message SessionMsg {
  required SessionCallType type = 1;
  
  // This message could be one of the following specific types of message
  optional S_Return_Code_Msg s_rc = 2;
  optional S_New_Context_Msg s_new_context = 3;
  optional SInitMsg s_init = 4;
  optional SBindMsg s_bind = 5;
  optional SAcceptMsg s_accept = 6;
  optional SSendMsg s_send = 7;
  optional SSendRet s_send_ret = 8;
  optional SRecvMsg s_recv = 9;
  optional SRecvRet s_recv_ret = 10;
  optional SCloseMsg s_close = 11;
}

message S_Return_Code_Msg {
	required ReturnCode rc = 1;
	optional string message = 2;
}
 
message S_New_Context_Msg {
  optional string temp = 1; // currently not used
}

message SInitMsg {
  required string forward_path = 1;
  required string return_path = 2;
  required string my_name = 3;
}

message SBindMsg {
	required string name = 1;
}

message SAcceptMsg {
	required uint32 new_ctx = 1;
}

message SSendMsg {
	required string data = 1;
}

message SSendRet {
	required int32 bytes_sent = 1;
}

message SRecvMsg {
	required int32 bytes_to_recv = 1;
}

message SRecvRet {
	required string data = 1;
}

message SCloseMsg {
	optional string dummy = 1; // not used
}


// Messages between session processes

message SessionPacket {
	// Header fields
	required PacketType type = 1;
	required uint32 sender_ctx = 2;

	// Data field
	optional SessionInfo info = 10;
	optional SessionData data = 11;
}

message SessionInfo {

	message ServiceInfo {
		required string name = 1;
	}

	repeated ServiceInfo forward_path = 1;
	repeated ServiceInfo return_path = 2;
	optional string my_name = 3;
	optional bytes my_addr = 4; // If XIA, a sockaddr_x
	optional bytes initiator_addr = 5; // If XIA, a sockaddr_x
}

message SessionData {
	optional bytes data = 1;
}

// Stores information about an open transport connection.
// The connection might be shared between multiple sessions.
message ConnectionInfo {
	required string name = 1;
	required int32 sockfd = 2;
	repeated int32 sessions = 3;
	required string interface = 4 [default = "default"];
	required ConnType type = 5 [default = XSP];
}

message ContextInfo {
	enum ContextType {
		SESSION = 1;
		LISTEN = 2;
		UNASSIGNED = 3;
	}

	optional ContextType type = 1 [default = UNASSIGNED];
	optional bool initialized = 2 [default = false];
	optional string my_name = 3;
	optional bytes my_addr = 4;
}
