/*XIA Ping client*/

//TODO: Run the ping sender and ping receiver on different threads, so that Xrecv is running all the time, but send is scheduled

#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/time.h>
#include "Xsocket.h"
#include <fcntl.h>

#define HID0 "HID:0000000000000000000000000000000000000000"
#define HID1 "HID:0000000000000000000000000000000000000001"
#define AD0   "AD:1000000000000000000000000000000000000000"
#define AD1   "AD:1000000000000000000000000000000000000001"
#define AD2   "AD:1000000000000000000000000000000000000002"
#define RHID0 "HID:0000000000000000000000000000000000000002"
#define RHID1 "HID:0000000000000000000000000000000000000003"
#define CID0 "CID:2000000000000000000000000000000000000001"
#define SID0 "SID:0f00000000000000000000000000000000000055"

#define TOTALPINGS 100
#define MIGRATEPOINT 50

#define TIMEOUT 10000 //us

#define DEBUG 1

void error(const char *);

int main(int argc, char *argv[])
{
	int sock, n,dlen,i,seq_client_=0,seq_c,seq_s,rx=0;
	char reply[1024];
	char payload_new[2048],theirDAG[1024];    
	struct timeval tv,timeout;
    timeout.tv_sec = 1;
    timeout.tv_usec = TIMEOUT;
	uint64_t current_time, start_time,end_time;
    FILE *fp;
    fd_set masterfds;    // master file descriptor list
    fd_set readfds;  // temp file descriptor list for select()
    FD_ZERO(&masterfds);    // clear the master and temp sets
    FD_ZERO(&readfds);
    
    fp=fopen("output_client","w");
    
	//Open socket
	sock=Xsocket();
	if (sock < 0) 
		error("Opening socket");
		
    //Make it non-blocking
    fcntl(sock, F_SETFL, O_NONBLOCK);

	//XBind is optional. If not done an ephemeral port will be bound 
	//Xbind(sock,"RE AD:1000000000000000000000000000000000000009 HID:1500000000000000000000000000000000000055 SID:1f00000000000000000000000000000000000055");

	//Make the dDAG (the one you want to send packets to)
	char * dag = malloc(snprintf(NULL, 0, "RE %s %s %s", AD0, HID0,SID0) + 1);
	sprintf(dag, "RE %s %s %s", AD0, HID0,SID0);

	//Use connect if you want to use Xsend instead of Xsendto
	//printf("\nConnecting...\n");
	Xconnect(sock,dag);//Use with Xrecv
	
	//Set select
    FD_SET(sock,&masterfds);
    memcpy(&readfds,&masterfds,sizeof(fd_set));

    gettimeofday(&tv, NULL);
    start_time = (uint64_t)(tv.tv_sec) * 1000000 + tv.tv_usec;
    
	for (i=0;i<MIGRATEPOINT;i++)
	{
		//Use Xconnect() with Xsend()
		gettimeofday(&tv, NULL);
        current_time = (uint64_t)(tv.tv_sec) * 1000000 + tv.tv_usec;
		memcpy (payload_new, &seq_client_, 4);
		Xsend(sock,payload_new,4,0);
        fprintf(fp, "%lld: PING sent; client seq = %d\n",current_time, seq_client_);  // modify payload
        if (DEBUG)
            printf("%lld: PING sent; client seq = %d\n",current_time, seq_client_);  // modify payload         
        
        seq_client_++;
                 
		//Process reply from server
		
		//Use select
		readfds=masterfds;
		usleep(20);
	    if (select(sock+1, &readfds, NULL, NULL, &timeout) == -1) {
            perror("select");
            exit(4);
        }

        if (FD_ISSET(sock, &readfds))
        {
            //printf("Read from socket\n");
            // read from the socket
            n = Xrecv(sock,reply,1024,0);
      		//while(n>0)
       	    {   
       	        gettimeofday(&tv, NULL);
                current_time = (uint64_t)(tv.tv_sec) * 1000000 + tv.tv_usec;
       	        memcpy (&seq_c,reply, 4);
       	        memcpy (&seq_s,reply+4, 4);   
       	        fprintf(fp, "%lld: PONG received; client seq = %d, server seq = %d\n",current_time, seq_c, seq_s);
       	        if (DEBUG)
      	            printf("%lld: PONG received; client seq = %d, server seq = %d\n",current_time, seq_c, seq_s);
       	        rx++;
       	        n=0;
       	        //n = Xrecv(sock,reply,1024,0);
       	    }   
        }
        else
        {
            if(DEBUG)
            {
                gettimeofday(&tv, NULL);
                current_time = (uint64_t)(tv.tv_sec) * 1000000 + tv.tv_usec;
                printf("%lld: timeout\n",current_time);
            }
        }     
	}
	printf("\nMoved!\n");
	fprintf(fp,"\nMoved!\n");
	system("echo 'write move.run' | nc 127.0.0.1 7777");
	
	for (i=MIGRATEPOINT;i<TOTALPINGS;i++)
	{
				//Use Xconnect() with Xsend()
		gettimeofday(&tv, NULL);
        current_time = (uint64_t)(tv.tv_sec) * 1000000 + tv.tv_usec;
		memcpy (payload_new, &seq_client_, 4);
		Xsend(sock,payload_new,4,0);
        fprintf(fp, "%lld: PING sent; client seq = %d\n",current_time, seq_client_);  // modify payload
        if (DEBUG)
            printf("%lld: PING sent; client seq = %d\n",current_time, seq_client_);  // modify payload         
        
        seq_client_++;
                 
		//Process reply from server
		
		//Use select
		memcpy(&readfds,&masterfds,sizeof(fd_set));
	    if (select(sock+1, &readfds, NULL, NULL, &timeout) == -1) {
            perror("select");
            exit(4);
        }

        if (FD_ISSET(sock, &readfds))
        {
            //printf("Read from socket\n");
            // read from the socket
            n = Xrecv(sock,reply,1024,0);
      		while(n>0)
       	    {   
       	        gettimeofday(&tv, NULL);
                current_time = (uint64_t)(tv.tv_sec) * 1000000 + tv.tv_usec;
       	        memcpy (&seq_c,reply, 4);
       	        memcpy (&seq_s,reply+4, 4);   
       	        fprintf(fp, "%lld: PONG received; client seq = %d, server seq = %d\n",current_time, seq_c, seq_s);
       	        if (DEBUG)
      	            printf("%lld: PONG received; client seq = %d, server seq = %d\n",current_time, seq_c, seq_s);
       	        rx++;
       	        n=0;
       	        n = Xrecv(sock,reply,1024,0);
       	    }   
        }
        else
        {
            if(DEBUG)
            {
                gettimeofday(&tv, NULL);
                current_time = (uint64_t)(tv.tv_sec) * 1000000 + tv.tv_usec;
                printf("%lld: timeout\n",current_time);
            }
        }   
	}
	gettimeofday(&tv, NULL);
    end_time = (uint64_t)(tv.tv_sec) * 1000000 + tv.tv_usec;
	
    //fcntl(sock, F_SETFL, fcntl(sock, F_GETFL) & ~O_NONBLOCK);
    if(rx<TOTALPINGS)  
   	for(i=0;i<1&&rx<TOTALPINGS;i++)
	{    
		//Process reply from server
		
		//Use select
		memcpy(&readfds,&masterfds,sizeof(fd_set));
        if (select(sock+1, &readfds, NULL, NULL, &timeout) == -1) {
            perror("select");
            exit(4);
        }
        if (FD_ISSET(sock, &readfds))
        {
            //printf("Read from socket\n");
            // read from the socket
            n = Xrecv(sock,reply,1024,0);
      		while(n>0)
       	    {   
       	        gettimeofday(&tv, NULL);
                current_time = (uint64_t)(tv.tv_sec) * 1000000 + tv.tv_usec;
       	        memcpy (&seq_c,reply, 4);
       	        memcpy (&seq_s,reply+4, 4);   
       	        fprintf(fp, "%lld: PONG received; client seq = %d, server seq = %d\n",current_time, seq_c, seq_s);
       	        if (DEBUG)
      	            printf("%lld: PONG received; client seq = %d, server seq = %d\n",current_time, seq_c, seq_s);
       	        rx++;
       	        n=0;
       	        n = Xrecv(sock,reply,1024,0);
       	    }   
        }
        else
        {
            if(DEBUG)
            {
                gettimeofday(&tv, NULL);
                current_time = (uint64_t)(tv.tv_sec) * 1000000 + tv.tv_usec;
                printf("%lld: timeout\n",current_time);
            }
        }   
    }
    

    printf("\npps=%f\n",(float)TOTALPINGS/((float)(end_time-start_time)/1000000));
    //printf("\npps=%f\n",(float)(end_time-start_time)/1000000);
    fclose(fp);
	Xclose(sock);
	return 0;
}

